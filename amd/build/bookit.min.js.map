{"version":3,"file":"bookit.min.js","sources":["../src/bookit.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module     mod_booking/bookit\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\nimport {reloadAllTables} from 'local_wunderbyte_table/reload';\n\nimport {closeModal, closeInline} from 'mod_booking/bookingpage/prepageFooter';\n\nvar currentbookitpage = {};\nvar totalbookitpages = {};\n\nexport var SELECTORS = {\n    MODALID: 'sbPrePageModal_',\n    INLINEID: 'sbPrePageInline_',\n    INMODALDIV: ' div.modalMainContent',\n    MODALHEADER: 'div.modalHeader',\n    MODALBUTTONAREA: 'div.modalButtonArea',\n    MODALFOOTER: 'div.modalFooter',\n    CONTINUEBUTTON: 'a.continue-button', // Don't want to find button right now.\n    BACKBUTTON: 'a.back-button', // Don't want to find button right now.\n    BOOKITBUTTON: 'div.booking-button-area.noprice',\n    INMODALBUTTON: 'div.in-modal-button',\n    STATICBACKDROP: 'div.modal-backdrop',\n};\n\n/**\n * Initializes the bookit button for the normal bookit function.\n * @param {integer} itemid\n * @param {string} area\n */\nexport const initbookitbutton = (itemid, area) => {\n\n    const initselector = SELECTORS.BOOKITBUTTON +\n    '[data-itemid]' +\n    '[data-area]';\n\n    if (!itemid || !area) {\n        const initbuttons = document.querySelectorAll(initselector);\n        initbuttons.forEach(button => {\n            const inititemid = button.dataset.itemid;\n            const initarea = button.dataset.area;\n            initbookitbutton(inititemid, initarea);\n        });\n        return;\n    }\n\n    const selector = SELECTORS.BOOKITBUTTON +\n    '[data-itemid=\"' + itemid + '\"]' +\n    '[data-area=\"' + area + '\"]';\n\n    const buttons = document.querySelectorAll(selector);\n\n    if (!buttons) {\n        return;\n    }\n\n    // We support more than one booking button on the same page.\n    buttons.forEach(button => {\n\n        if (button.dataset.nojs) {\n            return;\n        }\n\n        // We don't run code on disabled buttons.\n        if (button.classList.contains('disabled')) {\n            return;\n        }\n\n        if (!button.dataset.initialized) {\n            button.dataset.initialized = 'true';\n\n            const userid = button.dataset.userid;\n\n            button.addEventListener('click', (e) => {\n\n                // E.stopPropagation();\n\n                const data = button.dataset;\n\n                if (e.target.classList.contains('shopping-cart-cancel-button')) {\n\n                    import('local_shopping_cart/shistory')\n                    // eslint-disable-next-line promise/always-return\n                    .then(shoppingcart => {\n                        const confirmCancelModal = shoppingcart.confirmCancelModal;\n                        // Now you can use the specific function\n                        confirmCancelModal(button, 0);\n                    })\n                    .catch(err => {\n                        // Handle any errors, including if the module doesn't exist\n                        // eslint-disable-next-line no-console\n                        console.log(err);\n                    });\n\n\n                } else if (\n                    e.target.classList.contains('btn')\n                    && !e.target.href\n                ) {\n\n                    if (!e.target.href || e.target.href.length < 2) {\n                        bookit(itemid, area, userid, data);\n                    }\n                }\n            });\n        }\n    });\n};\n\n/**\n *\n * @param {int} itemid\n * @param {string} area\n * @param {int} userid\n * @param {object} data\n */\nexport function bookit(itemid, area, userid, data) {\n\n    // eslint-disable-next-line no-console\n    console.log('run bookit');\n\n    Ajax.call([{\n        methodname: \"mod_booking_bookit\",\n        args: {\n            'itemid': itemid,\n            'area': area,\n            'userid': userid,\n            'data': JSON.stringify(data),\n        },\n        done: function(res) {\n\n            var skipreload = false;\n\n            if (document.querySelector('.booking-elective-component')) {\n                window.location.reload();\n            }\n\n            const jsonarray = JSON.parse(res.json);\n\n            // We might have more than one template to render.\n            const templates = res.template.split(',');\n\n            // There might be more than one button area.\n            const buttons = document.querySelectorAll(SELECTORS.BOOKITBUTTON +\n                '[data-itemid=\\'' + itemid + '\\']' +\n                '[data-area=\\'' + area + '\\']');\n\n            const promises = [];\n\n            // We run through every button. and render the data.\n            buttons.forEach(button => {\n\n                // eslint-disable-next-line no-console\n                console.log('bookit values', button.dataset.nojs, res.status);\n                skipreload = true;\n                if (button.dataset.nojs == 1\n                    && res.status == 0) {\n                    // eslint-disable-next-line no-console\n                    console.log('bookit skip', button.dataset.nojs, res.status);\n                } else {\n                    // For every button, we need a new jsonarray.\n                    const arraytoreduce = [...jsonarray];\n                    if (res.status == 1) {\n                        skipreload = false;\n                    }\n                    templates.forEach(template => {\n\n                        const data = arraytoreduce.shift();\n\n                        const datatorender = data.data ?? data;\n\n                        const promise = Templates.renderForPromise(template, datatorender).then(({html, js}) => {\n\n                            Templates.replaceNode(button, html, js);\n\n                            return true;\n                        }).catch(ex => {\n                            Notification.addNotification({\n                                message: 'failed rendering ' + ex,\n                                type: \"danger\"\n                            });\n                        });\n\n                        promises.push(promise);\n                    });\n                }\n            });\n\n            Promise.all(promises).then(() => {\n\n                const backdrop = document.querySelector(SELECTORS.STATICBACKDROP);\n\n                if (area === 'subbooking') {\n                    skipreload = true;\n                } else {\n                    if (currentbookitpage[itemid] < totalbookitpages[itemid]) {\n                        skipreload = true;\n                    }\n                }\n\n                // eslint-disable-next-line no-console\n                console.log('skipreload', skipreload, currentbookitpage[itemid], totalbookitpages[itemid]);\n\n                if (!backdrop && !skipreload) {\n                    reloadAllTables();\n                }\n\n                // The actions on successful booking are executed elsewhere.\n                return true;\n            }).catch(e => {\n                // eslint-disable-next-line no-console\n                console.log(e);\n            });\n        }\n    }]);\n}\n\n/**\n * Gets called from mustache template.\n * @param {integer} optionid\n * @param {integer} userid\n * @param {integer} totalnumberofpages\n * @param {string} uniquid\n */\nexport const initprepagemodal = (optionid, userid, totalnumberofpages, uniquid) => {\n\n    // eslint-disable-next-line no-console\n    console.log('initprepagemodal', optionid, userid, totalnumberofpages, uniquid);\n\n    if (!optionid || !uniquid || !totalnumberofpages) {\n\n        const elements = document.querySelectorAll(\"[id^=\" + SELECTORS.MODALID);\n\n        elements.forEach(element => {\n\n            if (element.querySelector('[data-action=\"bookondetail\"]')) {\n                // eslint-disable-next-line no-console\n                console.log('bookondetail abort');\n                return;\n            }\n\n            optionid = element.dataset.optionid;\n            uniquid = element.dataset.uniquid;\n            userid = element.dataset.userid;\n            totalnumberofpages = element.dataset.pages;\n            if (optionid && uniquid) {\n                initprepagemodal(optionid, userid, totalnumberofpages, uniquid);\n            }\n        });\n        return;\n    }\n\n    currentbookitpage[optionid] = 0;\n    totalbookitpages[optionid] = totalnumberofpages;\n\n    // We need to get all prepage modals on this site. Make sure they are initialized.\n    respondToVisibility(optionid, userid, uniquid, totalnumberofpages, loadPreBookingPage);\n};\n\n/**\n * Gets called from mustache template.\n * @param {integer} optionid\n * @param {integer} userid\n * @param {integer} totalnumberofpages\n * @param {string} uniquid\n */\nexport const initprepageinline = (optionid, userid, totalnumberofpages, uniquid) => {\n\n    // eslint-disable-next-line no-console\n    console.log('initprepageinline', optionid, userid, totalnumberofpages, uniquid);\n\n    if (!optionid || !uniquid || !totalnumberofpages) {\n\n        const elements = document.querySelectorAll(\"[id^=\" + SELECTORS.INLINEID);\n\n        // eslint-disable-next-line no-console\n        console.log(elements);\n\n        elements.forEach(element => {\n            optionid = element.dataset.optionid;\n            uniquid = element.dataset.uniquid;\n            userid = element.dataset.userid;\n            totalnumberofpages = element.dataset.pages;\n            if (optionid && uniquid) {\n                initprepageinline(optionid, userid, totalnumberofpages, uniquid);\n            }\n        });\n        return;\n    }\n\n    currentbookitpage[optionid] = 0;\n    totalbookitpages[optionid] = totalnumberofpages;\n\n    // Retrieve the right button.\n    const buttons = document.querySelectorAll(\n        '[data-itemid=\"' + optionid + '\"]' +\n        '[data-area=\"option\"]'\n    );\n\n    // Add the click listener to the button.\n\n    buttons.forEach(button => {\n\n        if (button.dataset.initialized) {\n            return;\n        }\n\n        button.dataset.initialized = true;\n\n        // eslint-disable-next-line no-console\n        console.log('add listener to button', button, button.dataset.action);\n\n        if (button.querySelector('[data-action=\"bookondetail\"]')) {\n            // eslint-disable-next-line no-console\n            console.log('bookondetail abort');\n            return;\n        }\n\n        button.addEventListener('click', e => {\n\n            // eslint-disable-next-line no-console\n            console.log('e.target', e.target);\n\n            // Get the row element.\n            let rowcontainer = e.target.closest('.mod-booking-row');\n\n            const transferarea = !rowcontainer.lastElementChild.classList.contains('inlineprepagearea');\n            // We move the inlineprepagearea only if we need to.\n            if (transferarea) {\n                let inlinediv = returnVisibleElement(optionid, uniquid, SELECTORS.INMODALDIV);\n\n                rowcontainer.append(inlinediv.closest('.inlineprepagearea'));\n                // Inlinediv.remove();\n\n                // We need to get all prepage modals on this site. Make sure they are initialized.\n                loadPreBookingPage(optionid, userid, uniquid);\n            }\n        });\n    });\n};\n\n/**\n * React on visibility change.\n * @param {integer} optionid\n * @param {integer} userid\n * @param {string} uniquid\n * @param {integer} totalnumberofpages\n * @param {function} callback\n */\nfunction respondToVisibility(optionid, userid, uniquid, totalnumberofpages, callback) {\n\n    let elements = document.querySelectorAll(\"[id^=\" + SELECTORS.MODALID + optionid + \"_\" + uniquid + \"]\");\n\n    elements.forEach(element => {\n\n        if (!element || element.dataset.initialized == 'true') {\n            return;\n        }\n\n        element.dataset.initialized = true;\n\n        var observer = new MutationObserver(function() {\n\n            if (!isHidden(element)) {\n\n                // Because of the modal animation, \"isHIdden\" is also true on hiding modal.\n                if (element.classList.contains('show')) {\n\n                    // Todo: Make sure it's not triggered on close.\n                    callback(optionid, userid, uniquid, totalnumberofpages);\n                }\n            }\n        });\n\n        // We look if we find a hidden parent. If not, we load right away.\n        while (element !== null) {\n            if (!isHidden(element)) {\n                element = element.parentElement;\n            } else {\n                if (element.dataset.observed) {\n                    return;\n                }\n\n                observer.observe(element, {attributes: true});\n                element.dataset.observed = true;\n                return;\n            }\n        }\n        callback(optionid, userid, uniquid, totalnumberofpages);\n    });\n}\n\n/**\n * Function to check visibility of element.\n * @param {*} el\n * @returns {boolean}\n */\nfunction isHidden(el) {\n    var style = window.getComputedStyle(el);\n    return ((style.display === 'none') || (style.visibility === 'hidden'));\n}\n\n/**\n * Loads the (next) pre booking page.\n * @param {integer} optionid\n * @param {integer} userid\n * @param {string} uniquid\n */\nexport const loadPreBookingPage = (\n    optionid, userid = 0, uniquid = '') => {\n\n    const element = returnVisibleElement(optionid, uniquid, SELECTORS.INMODALDIV);\n\n    if (element) {\n        while (element.firstChild) {\n            element.removeChild(element.firstChild);\n        }\n    } else {\n        // eslint-disable-next-line no-console\n        console.error('didnt find element');\n    }\n\n    Ajax.call([{\n        methodname: \"mod_booking_allow_add_item_to_cart\",\n        args: {\n            'itemid': optionid,\n            'userid': userid,\n        },\n        done: function(response) {\n            // Will always be 1, if shopping cart is not installed!\n            if (response.success == 1\n                || response.success == 5 // Already booked, we need this for subbokings.\n                || response.success == 0 // Already in cart, we need this for subbokings.\n            ) {\n                Ajax.call([{\n                    methodname: \"mod_booking_load_pre_booking_page\",\n                    args: {\n                        optionid,\n                        userid,\n                        'pagenumber': currentbookitpage[optionid],\n                    },\n                    done: function(res) {\n                        // If we are on the last page, we reset it to 0.\n                        if (currentbookitpage[optionid] === totalbookitpages[optionid] - 1) {\n                            currentbookitpage[optionid] = 0;\n                        }\n\n                        const jsonobject = JSON.parse(res.json);\n\n                        // We support more than one template, they will be seperated by comma.\n                        // We have a data key in the json\n                        const templates = res.template.split(',');\n                        let dataarray = jsonobject;\n                        // Const buttontype = res.buttontype;\n\n                        renderTemplatesOnPage(templates, dataarray, element);\n                    },\n                    fail: function(err) {\n                        // eslint-disable-next-line no-console\n                        console.log(err);\n                    }\n                }]);\n            } else {\n\n                // eslint-disable-next-line no-console\n                console.log('closeModal');\n                closeModal(optionid, false);\n                closeInline(optionid, false);\n\n                // Make sure that the prepage modal is actually closed.\n\n                import('local_shopping_cart/cart')\n                    // eslint-disable-next-line promise/always-return\n                    .then(shoppingcart => {\n                        const addItemShowNotification = shoppingcart.addItemShowNotification;\n                        // Now you can use the specific function\n                        response.userid = userid;\n                        addItemShowNotification(response);\n                    })\n                    .catch(err => {\n                        // Handle any errors, including if the module doesn't exist\n                        // eslint-disable-next-line no-console\n                        console.log(err);\n                });\n            }\n\n            return true;\n        },\n        fail: function(err) {\n            // eslint-disable-next-line no-console\n            console.log(err);\n        }\n    }]);\n};\n\n/**\n *\n * @param {string} templates\n * @param {object} dataarray\n * @param {HTMLElement} element\n */\nasync function renderTemplatesOnPage(templates, dataarray, element) {\n\n    const modal = element.closest('.prepage-body');\n\n    // We need to pass the id of our element to the templates to render.\n    // If not, we might select the wrong modal or collapsible.\n    let elementid = modal.id;\n\n    if (!elementid) {\n        const parent = modal.closest('[id]');\n        elementid = parent.id;\n    }\n\n    // eslint-disable-next-line no-console\n    console.log(modal, elementid);\n\n    modal.querySelector(SELECTORS.MODALHEADER).innerHTML = '';\n    modal.querySelector(SELECTORS.INMODALDIV).innerHTML = '';\n    modal.querySelector(SELECTORS.MODALBUTTONAREA).innerHTML = '';\n    modal.querySelector(SELECTORS.MODALFOOTER).innerHTML = '';\n\n    var counter = 0;\n    templates.forEach(async template => {\n\n        const data = dataarray.shift();\n\n        let targetelement = element;\n\n        if (!data) {\n            return true;\n        }\n\n        data.data.elementid = elementid;\n\n        switch (template) {\n            case 'mod_booking/bookingpage/header':\n                targetelement = modal.querySelector(SELECTORS.MODALHEADER);\n                break;\n            case 'mod_booking/bookit_button':\n            case 'mod_booking/bookit_price':\n                targetelement = modal.querySelector(SELECTORS.MODALBUTTONAREA);\n                break;\n            case 'mod_booking/bookingpage/footer':\n                targetelement = modal.querySelector(SELECTORS.MODALFOOTER);\n                break;\n            default:\n                targetelement = modal.querySelector(SELECTORS.INMODALDIV);\n                break;\n        }\n\n        // eslint-disable-next-line no-console\n        console.log(data.data);\n\n        await Templates.renderForPromise(template, data.data).then(({html, js}) => {\n\n            if (counter < 1) {\n                counter++;\n                Templates.replaceNodeContents(targetelement, html, js);\n            } else {\n                Templates.appendNodeContents(targetelement, html, js);\n            }\n            return true;\n        }).catch(ex => {\n            Notification.addNotification({\n                message: 'failed rendering ' + JSON.stringify(ex),\n                type: \"danger\"\n            });\n        });\n        return true;\n    });\n    return true;\n}\n\n/**\n * We want to find out the visible modal\n * @param {integer} optionid\n * @param {string} uniquid\n * @param {string} appendedSelector\n * @returns {HTMLElement}\n */\nfunction returnVisibleElement(optionid, uniquid, appendedSelector) {\n\n    // First, we get all the possbile Elements (we don't now the unique id appended to the element.)\n    let selector = '[id^=\"' + SELECTORS.MODALID + optionid + '_' + uniquid + '\"] ' + appendedSelector;\n    if (!uniquid || uniquid.length === 0) {\n        selector = '[id^=\"' + SELECTORS.MODALID + optionid + '_\"].show ' + appendedSelector;\n    }\n\n    let elements = document.querySelectorAll(selector);\n\n    // If the nodelist is empty, we we mgiht use inline.\n    // If so, we need to have a different way of selecting elements.\n    if (elements.length === 0) {\n\n        selector = '[id^=\"' + SELECTORS.INLINEID + optionid + '_\"] ' + appendedSelector;\n        elements = document.querySelectorAll(selector);\n\n    }\n\n    let visibleElement = null;\n\n    elements.forEach(element => {\n\n        var elementtocheck = element.parentElement.parentElement;\n\n        // We look if we find a hidden parent. If not, we load right away.\n        while (elementtocheck !== null) {\n            if (!isHidden(elementtocheck)) {\n                elementtocheck = elementtocheck.parentElement;\n\n            } else {\n\n                break;\n            }\n        }\n        // If after the while, we have still an element, it's hidden.\n        // So we only apply visible if it's null.\n        if (!elementtocheck) {\n            visibleElement = element;\n        }\n    });\n\n    return visibleElement;\n}\n\n/**\n * Load next prepage booking page.\n * @param {int} optionid\n * @param {int} userid\n */\nexport function continueToNextPage(optionid, userid) {\n\n    // eslint-disable-next-line no-console\n    console.log('continueToNextPage', optionid, userid, currentbookitpage[optionid], totalbookitpages[optionid]);\n    if (currentbookitpage[optionid] < totalbookitpages[optionid]) {\n        currentbookitpage[optionid]++;\n        loadPreBookingPage(optionid, userid);\n    }\n}\n\n/**\n *  Load previous prepage booking page.\n * @param {int} optionid\n * @param {int} userid\n */\nexport function backToPreviousPage(optionid, userid) {\n\n    currentbookitpage[optionid]--;\n\n    loadPreBookingPage(optionid, userid);\n}\n\n/**\n *  Set back variables used in modal.\n *  @param {int} optionid\n */\nexport function setBackModalVariables(optionid) {\n\n    currentbookitpage[optionid] = 0;\n}\n"],"names":["optionid","userid","currentbookitpage","loadPreBookingPage","console","log","totalbookitpages","_ajax","_interopRequireDefault","_templates","_notification","_systemImportTransformerGlobalIdentifier","window","self","global","e","__esModule","default","SELECTORS","_exports","MODALID","INLINEID","INMODALDIV","MODALHEADER","MODALBUTTONAREA","MODALFOOTER","CONTINUEBUTTON","BACKBUTTON","BOOKITBUTTON","INMODALBUTTON","STATICBACKDROP","initbookitbutton","itemid","area","initselector","document","querySelectorAll","forEach","button","inititemid","dataset","initarea","selector","buttons","nojs","classList","contains","initialized","addEventListener","data","target","define","amd","Promise","resolve","reject","require","module","exports","component","loader","then","shoppingcart","confirmCancelModal","catch","err","href","length","bookit","Ajax","call","methodname","args","JSON","stringify","done","res","skipreload","querySelector","location","reload","jsonarray","parse","json","templates","template","split","promises","status","arraytoreduce","shift","datatorender","promise","Templates","renderForPromise","_ref","html","js","replaceNode","ex","Notification","addNotification","message","type","push","all","backdrop","reloadAllTables","initprepagemodal","totalnumberofpages","uniquid","callback","elements","element","observer","MutationObserver","isHidden","observed","observe","attributes","parentElement","respondToVisibility","pages","initprepageinline","action","rowcontainer","closest","lastElementChild","inlinediv","returnVisibleElement","append","el","style","getComputedStyle","display","visibility","arguments","undefined","firstChild","removeChild","error","response","success","pagenumber","jsonobject","async","dataarray","modal","elementid","id","parent","innerHTML","counter","targetelement","_ref2","replaceNodeContents","appendNodeContents","renderTemplatesOnPage","fail","closeModal","closeInline","addItemShowNotification","appendedSelector","visibleElement","elementtocheck"],"mappings":"yVA0pBO,SAA4BA,SAAUC,QAEzCC,kBAAkBF,YAElBG,mBAAmBH,SAAUC,OACjC,qDApBO,SAA4BD,SAAUC,QAGzCG,QAAQC,IAAI,qBAAsBL,SAAUC,OAAQC,kBAAkBF,UAAWM,iBAAiBN,WAC9FE,kBAAkBF,UAAYM,iBAAiBN,YAC/CE,kBAAkBF,YAClBG,mBAAmBH,SAAUC,QAErC,mJAkBO,SAA+BD,UAElCE,kBAAkBF,UAAY,CAClC,EAnpBAO,MAAAC,uBAAAD,OACAE,WAAAD,uBAAAC,YACAC,cAAAF,uBAAAE,eAA6C,IAAAC,yCAAA,oBAAAC,OAAAA,OAAA,oBAAAC,KAAAA,KAAA,oBAAAC,OAAAA,OAAA,CAAA;;;;;KAR7C,SAAAN,uBAAAO,GAAAA,OAAAA,GAAAA,EAAAC,WAAAD,EAAAE,CAAAA,QAAAF,EAAA,CAaA,IAAIb,kBAAoB,CAAA,EACpBI,iBAAmB,CAAA,EAEZY,UAASC,SAAAD,UAAG,CACnBE,QAAS,kBACTC,SAAU,mBACVC,WAAY,wBACZC,YAAa,kBACbC,gBAAiB,sBACjBC,YAAa,kBACbC,eAAgB,oBAChBC,WAAY,gBACZC,aAAc,kCACdC,cAAe,sBACfC,eAAgB,sBAQb,MAAMC,iBAAmBA,CAACC,OAAQC,QAErC,MAAMC,aAAehB,UAAUU,aAAVV,2BAIrB,IAAKc,SAAWC,KAAM,CAOlB,YANoBE,SAASC,iBAAiBF,cAClCG,SAAQC,SAChB,MAAMC,WAAaD,OAAOE,QAAQR,OAC5BS,SAAWH,OAAOE,QAAQP,KAChCF,iBAAiBQ,WAAYE,SAAS,GAG9C,CAEA,MAAMC,SAAWxB,UAAUU,aAC3B,iBAAmBI,OADFd,iBAEAe,KAAO,KAElBU,QAAUR,SAASC,iBAAiBM,UAErCC,SAKLA,QAAQN,SAAQC,SAEZ,IAAIA,OAAOE,QAAQI,OAKfN,OAAOO,UAAUC,SAAS,cAIzBR,OAAOE,QAAQO,YAAa,CAC7BT,OAAOE,QAAQO,YAAc,OAE7B,MAAM9C,OAASqC,OAAOE,QAAQvC,OAE9BqC,OAAOU,iBAAiB,SAAUjC,IAI9B,MAAMkC,KAAOX,OAAOE,QAEhBzB,EAAEmC,OAAOL,UAAUC,SAAS,gCAE5B,mBAAAnC,yCAAAwC,QAAAxC,yCAAAwC,OAAAC,IAAAC,IAAAA,SAAAC,SAAAA,QAAAC,QAAA5C,yCAAA6C,QAAAF,CAAAA,gCAAAA,QAAAC,OAAA,IAAAE,oBAAAA,QAAAA,OAAAC,SAAAD,oBAAAD,SAAAC,oBAAAA,QAAAA,OAAAE,WAAAhD,yCAAA6C,SAAAH,cAAA1C,yCAAA6C,QAAAI,OAAAP,QAAAC,QAAAE,QAAO,iCAA8BH,QAAAC,QAAA3C,2EAEpCkD,MAAKC,gBAGFC,EAF2BD,aAAaC,oBAErBzB,OAAQ,EAAE,IAEhC0B,OAAMC,MAGH7D,QAAQC,IAAI4D,IAAI,IAKpBlD,EAAEmC,OAAOL,UAAUC,SAAS,SACxB/B,EAAEmC,OAAOgB,QAGRnD,EAAEmC,OAAOgB,MAAQnD,EAAEmC,OAAOgB,KAAKC,OAAS,IACzCC,OAAOpC,OAAQC,KAAMhC,OAAQgD,KAErC,GAER,IACF,EAUC,SAASmB,OAAOpC,OAAQC,KAAMhC,OAAQgD,MAGzC7C,QAAQC,IAAI,cAEZgE,MAAIpD,QAACqD,KAAK,CAAC,CACPC,WAAY,qBACZC,KAAM,CACFxC,OAAUA,OACVC,KAAQA,KACRhC,OAAUA,OACVgD,KAAQwB,KAAKC,UAAUzB,OAE3B0B,KAAM,SAASC,KAEX,IAAIC,YAAa,EAEb1C,SAAS2C,cAAc,gCACvBlE,OAAOmE,SAASC,SAGpB,MAAMC,UAAYR,KAAKS,MAAMN,IAAIO,MAG3BC,UAAYR,IAAIS,SAASC,MAAM,KAG/B3C,QAAUR,SAASC,iBAAiBlB,UAAUU,aAChD,iBAAoBI,OADkBd,iBAEpBe,KAAO,MAEvBsD,SAAW,GAGjB5C,QAAQN,SAAQC,SAKZ,GAFAlC,QAAQC,IAAI,gBAAiBiC,OAAOE,QAAQI,KAAMgC,IAAIY,QACtDX,YAAa,EACc,GAAvBvC,OAAOE,QAAQI,MACE,GAAdgC,IAAIY,OAEPpF,QAAQC,IAAI,cAAeiC,OAAOE,QAAQI,KAAMgC,IAAIY,YACjD,CAEH,MAAMC,cAAgB,IAAIR,WACR,GAAdL,IAAIY,SACJX,YAAa,GAEjBO,UAAU/C,SAAQgD,WAEd,MAAMpC,KAAOwC,cAAcC,QAErBC,aAAe1C,KAAKA,MAAQA,KAE5B2C,QAAUC,WAAS5E,QAAC6E,iBAAiBT,SAAUM,cAAc9B,MAAKkC,OAAgB,IAAfC,KAACA,KAAIC,GAAEA,IAAGF,KAI/E,OAFAF,WAAS5E,QAACiF,YAAY5D,OAAQ0D,KAAMC,KAE7B,CAAI,IACZjC,OAAMmC,KACLC,cAAYnF,QAACoF,gBAAgB,CACzBC,QAAS,oBAAsBH,GAC/BI,KAAM,UACR,IAGNhB,SAASiB,KAAKZ,QAAQ,GAE9B,KAGJvC,QAAQoD,IAAIlB,UAAU1B,MAAK,KAEvB,MAAM6C,SAAWvE,SAAS2C,cAAc5D,UAAUY,gBAkBlD,OAhBa,eAATG,MAGI/B,kBAAkB8B,QAAU1B,iBAAiB0B,WAFjD6C,YAAa,GAQjBzE,QAAQC,IAAI,aAAcwE,WAAY3E,kBAAkB8B,QAAS1B,iBAAiB0B,SAE7E0E,UAAa7B,aACd,EAAA8B,QAAAA,oBAIG,CAAI,IACZ3C,OAAMjD,IAELX,QAAQC,IAAIU,EAAE,GAEtB,IAER,CA5GEI,SAAAY,iBAAAA,iBAqHK,MAAM6E,iBAAmBA,CAAC5G,SAAUC,OAAQ4G,mBAAoBC,WAKnE,GAFA1G,QAAQC,IAAI,mBAAoBL,SAAUC,OAAQ4G,mBAAoBC,SAEjE9G,UAAa8G,SAAYD,mBAuB9B3G,kBAAkBF,UAAY,EAC9BM,iBAAiBN,UAAY6G,mBAgGjC,SAA6B7G,SAAUC,OAAQ6G,QAASD,mBAAoBE,UAExE,IAAIC,SAAW7E,SAASC,iBAAiB,QAAUlB,UAAUE,QAAUpB,SAAW,IAAM8G,QAAU,KAElGE,SAAS3E,SAAQ4E,UAEb,GAAKA,SAA0C,QAA/BA,QAAQzE,QAAQO,YAAhC,CAIAkE,QAAQzE,QAAQO,aAAc,EAgB9B,IAdA,IAAImE,SAAW,IAAIC,kBAAiB,WAE3BC,SAASH,UAGNA,QAAQpE,UAAUC,SAAS,SAG3BiE,SAAS/G,SAAUC,OAAQ6G,QAASD,mBAGhD,IAGmB,OAAZI,SAAkB,CACrB,GAAKG,SAASH,SAEP,CACH,GAAIA,QAAQzE,QAAQ6E,SAChB,OAKJ,OAFAH,SAASI,QAAQL,QAAS,CAACM,YAAY,SACvCN,QAAQzE,QAAQ6E,UAAW,EAE/B,CATIJ,QAAUA,QAAQO,aAU1B,CACAT,SAAS/G,SAAUC,OAAQ6G,QAASD,mBA/BpC,CA+BuD,GAE/D,CAtIIY,CAAoBzH,SAAUC,OAAQ6G,QAASD,mBAAoB1G,wBA3BnE,CAEqBgC,SAASC,iBAAiB,QAAUlB,UAAUE,SAEtDiB,SAAQ4E,UAETA,QAAQnC,cAAc,gCAEtB1E,QAAQC,IAAI,uBAIhBL,SAAWiH,QAAQzE,QAAQxC,SAC3B8G,QAAUG,QAAQzE,QAAQsE,QAC1B7G,OAASgH,QAAQzE,QAAQvC,OACzB4G,mBAAqBI,QAAQzE,QAAQkF,MACjC1H,UAAY8G,SACZF,iBAAiB5G,SAAUC,OAAQ4G,mBAAoBC,SAC3D,GAGR,CAMsF,EACxF3F,SAAAyF,iBAAAA,iBASK,MAAMe,kBAAoBA,CAAC3H,SAAUC,OAAQ4G,mBAAoBC,WAKpE,GAFA1G,QAAQC,IAAI,oBAAqBL,SAAUC,OAAQ4G,mBAAoBC,UAElE9G,WAAa8G,UAAYD,mBAAoB,CAE9C,MAAMG,SAAW7E,SAASC,iBAAiB,QAAUlB,UAAUG,UAc/D,OAXAjB,QAAQC,IAAI2G,eAEZA,SAAS3E,SAAQ4E,UACbjH,SAAWiH,QAAQzE,QAAQxC,SAC3B8G,QAAUG,QAAQzE,QAAQsE,QAC1B7G,OAASgH,QAAQzE,QAAQvC,OACzB4G,mBAAqBI,QAAQzE,QAAQkF,MACjC1H,UAAY8G,SACZa,kBAAkB3H,SAAUC,OAAQ4G,mBAAoBC,QAC5D,GAGR,CAEA5G,kBAAkBF,UAAY,EAC9BM,iBAAiBN,UAAY6G,mBAGb1E,SAASC,iBACrB,iBAAmBpC,SAAnB,0BAMIqC,SAAQC,SAERA,OAAOE,QAAQO,cAInBT,OAAOE,QAAQO,aAAc,EAG7B3C,QAAQC,IAAI,yBAA0BiC,OAAQA,OAAOE,QAAQoF,QAEzDtF,OAAOwC,cAAc,gCAErB1E,QAAQC,IAAI,sBAIhBiC,OAAOU,iBAAiB,SAASjC,IAG7BX,QAAQC,IAAI,WAAYU,EAAEmC,QAG1B,IAAI2E,aAAe9G,EAAEmC,OAAO4E,QAAQ,oBAIpC,IAFsBD,aAAaE,iBAAiBlF,UAAUC,SAAS,qBAErD,CACd,IAAIkF,UAAYC,qBAAqBjI,SAAU8G,QAAS5F,UAAUI,YAElEuG,aAAaK,OAAOF,UAAUF,QAAQ,uBAItC3H,mBAAmBH,SAAUC,OAAQ6G,QACzC,KACF,GACJ,EA2DN,SAASM,SAASe,IACd,IAAIC,MAAQxH,OAAOyH,iBAAiBF,IACpC,MAA2B,SAAlBC,MAAME,SAA6C,WAArBF,MAAMG,UACjD,CA7DEpH,SAAAwG,kBAAAA,kBAqEK,MAAMxH,mBAAqB,SAC9BH,UAAuC,IAA7BC,OAAMuI,UAAArE,OAAA,QAAAsE,IAAAD,UAAA,GAAAA,UAAA,GAAG,EAEnB,MAAMvB,QAAUgB,qBAAqBjI,SAFRwI,UAAArE,OAAA,QAAAsE,IAAAD,UAAA,GAAAA,UAAA,GAAG,GAEwBtH,UAAUI,YAElE,GAAI2F,QACA,KAAOA,QAAQyB,YACXzB,QAAQ0B,YAAY1B,QAAQyB,iBAIhCtI,QAAQwI,MAAM,sBAGlBvE,MAAIpD,QAACqD,KAAK,CAAC,CACPC,WAAY,qCACZC,KAAM,CACFxC,OAAUhC,SACVC,OAAUA,QAEd0E,KAAM,SAASkE,UA0DX,OAxDwB,GAApBA,SAASC,SACc,GAApBD,SAASC,SACW,GAApBD,SAASC,QAEZzE,MAAIpD,QAACqD,KAAK,CAAC,CACPC,WAAY,oCACZC,KAAM,CACFxE,kBACAC,cACA8I,WAAc7I,kBAAkBF,WAEpC2E,KAAM,SAASC,KAEP1E,kBAAkBF,YAAcM,iBAAiBN,UAAY,IAC7DE,kBAAkBF,UAAY,GAGlC,MAAMgJ,WAAavE,KAAKS,MAAMN,IAAIO,OAsD1D8D,eAAqC7D,UAAW8D,UAAWjC,SAEvD,MAAMkC,MAAQlC,QAAQa,QAAQ,iBAI9B,IAAIsB,UAAYD,MAAME,GAEtB,IAAKD,UAAW,CACZ,MAAME,OAASH,MAAMrB,QAAQ,QAC7BsB,UAAYE,OAAOD,EACvB,CAGAjJ,QAAQC,IAAI8I,MAAOC,WAEnBD,MAAMrE,cAAc5D,UAAUK,aAAagI,UAAY,GACvDJ,MAAMrE,cAAc5D,UAAUI,YAAYiI,UAAY,GACtDJ,MAAMrE,cAAc5D,UAAUM,iBAAiB+H,UAAY,GAC3DJ,MAAMrE,cAAc5D,UAAUO,aAAa8H,UAAY,GAEvD,IAAIC,QAAU,EACdpE,UAAU/C,SAAQ4G,iBAEd,MAAMhG,KAAOiG,UAAUxD,QAEvB,IAAI+D,cAAgBxC,QAEpB,IAAKhE,KACD,OAAO,EAKX,OAFAA,KAAKA,KAAKmG,UAAYA,UAEd/D,UACJ,IAAK,iCACDoE,cAAgBN,MAAMrE,cAAc5D,UAAUK,aAC9C,MACJ,IAAK,4BACL,IAAK,2BACDkI,cAAgBN,MAAMrE,cAAc5D,UAAUM,iBAC9C,MACJ,IAAK,iCACDiI,cAAgBN,MAAMrE,cAAc5D,UAAUO,aAC9C,MACJ,QACIgI,cAAgBN,MAAMrE,cAAc5D,UAAUI,YAsBtD,OAjBAlB,QAAQC,IAAI4C,KAAKA,YAEX4C,WAAS5E,QAAC6E,iBAAiBT,SAAUpC,KAAKA,MAAMY,MAAK6F,QAAgB,IAAf1D,KAACA,KAAIC,GAAEA,IAAGyD,MAQlE,OANIF,QAAU,GACVA,UACA3D,WAAS5E,QAAC0I,oBAAoBF,cAAezD,KAAMC,KAEnDJ,WAAS5E,QAAC2I,mBAAmBH,cAAezD,KAAMC,KAE/C,CAAI,IACZjC,OAAMmC,KACLC,cAAYnF,QAACoF,gBAAgB,CACzBC,QAAS,oBAAsB7B,KAAKC,UAAUyB,IAC9CI,KAAM,UACR,KAEC,CAAI,GAGnB,CArHwBsD,CAJkBjF,IAAIS,SAASC,MAAM,KACrB0D,WAG4B/B,QAC/C,EACD6C,KAAM,SAAS7F,KAEX7D,QAAQC,IAAI4D,IAChB,MAKJ7D,QAAQC,IAAI,eACZ,EAAA0J,eAAUA,YAAC/J,UAAU,IACrB,EAAAgK,eAAWA,aAAChK,UAAU,IAItB,mBAAAW,yCAAAwC,QAAAxC,yCAAAwC,OAAAC,IAAAC,IAAAA,SAAAC,SAAAA,QAAAC,QAAA5C,yCAAA6C,QAAAF,CAAAA,4BAAAA,QAAAC,OAAA,IAAAE,oBAAAA,QAAAA,OAAAC,SAAAD,oBAAAD,SAAAC,oBAAAA,QAAAA,OAAAE,WAAAhD,yCAAA6C,SAAAH,cAAA1C,yCAAA6C,QAAAI,OAAAP,QAAAC,QAAAE,QAAO,6BAA0BH,QAAAC,QAAA3C,uEAE5BkD,MAAKC,eACF,MAAMmG,wBAA0BnG,aAAamG,wBAE7CpB,SAAS5I,OAASA,OAClBgK,wBAAwBpB,SAAS,IAEpC7E,OAAMC,MAGH7D,QAAQC,IAAI4D,IAAI,MAIrB,CACV,EACD6F,KAAM,SAAS7F,KAEX7D,QAAQC,IAAI4D,IAChB,MA0FR,SAASgE,qBAAqBjI,SAAU8G,QAASoD,kBAG7C,IAAIxH,SAAW,SAAWxB,UAAUE,QAAUpB,SAAW,IAAM8G,QAAU,MAAQoD,iBAC5EpD,SAA8B,IAAnBA,QAAQ3C,SACpBzB,SAAW,SAAWxB,UAAUE,QAAUpB,SAAW,YAAckK,kBAGvE,IAAIlD,SAAW7E,SAASC,iBAAiBM,UAIjB,IAApBsE,SAAS7C,SAETzB,SAAW,SAAWxB,UAAUG,SAAWrB,SAAW,OAASkK,iBAC/DlD,SAAW7E,SAASC,iBAAiBM,WAIzC,IAAIyH,eAAiB,KAuBrB,OArBAnD,SAAS3E,SAAQ4E,UAKb,IAHA,IAAImD,eAAiBnD,QAAQO,cAAcA,cAGjB,OAAnB4C,iBACEhD,SAASgD,iBACVA,eAAiBA,eAAe5C,cASnC4C,iBACDD,eAAiBlD,QACrB,IAGGkD,cACX,CAnIEhJ,SAAAhB,mBAAAA,kBAuKD"}